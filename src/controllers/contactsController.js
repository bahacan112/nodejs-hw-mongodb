import createError from "http-errors";
import {
  getAllContacts,
  getContactById,
  createContact,
  patchContact,
  deleteContact, // âœ… deleteContact servisinin var olduÄŸundan emin ol
} from "../services/contacts.js";
import ctrlWrapper from "../utils/ctrlWrapper.js";

export const getContactsController = async (req, res, next) => {
  try {
    const response = await getAllContacts(req.user._id, req.query);
    res.status(200).json(response);
  } catch (error) {
    next(error);
  }
};

export const getContactByIdController = ctrlWrapper(async (req, res, next) => {
  const { contactId } = req.params;
  const response = await getContactById(contactId);

  if (!response) {
    return next(createError(404, "Contact not found"));
  }

  res.status(200).json(response);
});

export const createContactController = ctrlWrapper(async (req, res, next) => {
  console.log("ðŸ“© Ä°stek GÃ¶vdesi:", req.body); // ðŸ›  Debug Ä°Ã§in Log

  if (!req.user || !req.user.id) {
    return next(createError(401, "Unauthorized: User ID is required"));
  }

  const userId = req.user.id; // KullanÄ±cÄ± ID'si doÄŸrulamadan alÄ±nÄ±yor

  // âœ… HatalÄ± Ã§aÄŸrÄ±yÄ± dÃ¼zelttik: userId artÄ±k birinci parametre
  const newContact = await createContact(userId, req.body);

  res.status(201).json({
    status: 201,
    message: "Successfully created a contact!",
    data: newContact,
  });
});

// ðŸ“Œ PATCH (GÃ¼ncelleme) KontrolÃ¶rÃ¼
export const patchContactController = ctrlWrapper(async (req, res, next) => {
  const { contactId } = req.params;
  const updatedContact = await patchContact(contactId, req.body);

  if (!updatedContact) {
    return next(createError(404, "Contact not found"));
  }

  res.status(200).json({
    status: 200,
    message: "Successfully patched a contact!",
    data: updatedContact,
  });
});

// ðŸ“Œ DELETE (Silme) KontrolÃ¶rÃ¼
export const deleteContactController = ctrlWrapper(async (req, res, next) => {
  const { contactId } = req.params;
  const deletedContact = await deleteContact(contactId);

  if (!deletedContact) {
    return next(createError(404, "Contact not found"));
  }

  res.status(204).send(); // 204 No Content
});
